#!/usr/bin/env python3
"""
Automatically generates pattern-list.js from the patterns directory.
Run this script after adding, renaming, or deleting pattern files.
Sorts patterns by CREATED timestamp (newest first).
Auto-adds CREATED timestamp to files missing one.
"""

import os
import re
import time


def main():
    # Get all .js files from the patterns directory with their timestamps
    patterns_dir = "patterns"
    pattern_data = []

    if os.path.exists(patterns_dir):
        for filename in os.listdir(patterns_dir):
            if filename.endswith(".js"):
                # Remove the .js extension to get the pattern name
                pattern_name = filename[:-3]
                filepath = os.path.join(patterns_dir, filename)

                # Read file to find CREATED timestamp
                timestamp = None
                try:
                    with open(filepath, "r") as f:
                        content = f.read()
                        # Look for CREATED=([0-9]+) pattern
                        match = re.search(r"CREATED=([0-9]+)", content)
                        if match:
                            timestamp = int(match.group(1))
                except Exception as e:
                    print(f"Warning: Could not read {filename}: {e}")

                # If no timestamp found, add one to the file
                if timestamp is None:
                    timestamp = int(time.time())
                    print(
                        f"\033[1;31mWarning: No CREATED timestamp found in {filename}\033[0m"
                    )
                    print(f"  → Auto-adding CREATED={timestamp} to the file")

                    try:
                        with open(filepath, "a") as f:
                            # Add newline if file doesn't end with one
                            if content and not content.endswith("\n"):
                                f.write("\n")
                            f.write(f"\n// CREATED={timestamp}\n")
                    except Exception as e:
                        print(f"  → Error adding timestamp to {filename}: {e}")

                pattern_data.append((timestamp, pattern_name))

    # Sort by timestamp (newest first)
    pattern_data.sort(key=lambda x: x[0], reverse=True)

    # Generate the JavaScript content
    js_content = "// Auto-generated by update-patterns.py\n"
    js_content += "const PATTERN_LIST = [\n"

    for i, (timestamp, pattern) in enumerate(pattern_data):
        js_content += f'\t"{pattern}"'
        if i < len(pattern_data) - 1:
            js_content += ","
        js_content += "\n"

    js_content += "];"

    # Write to pattern-list.js
    with open("pattern-list.js", "w") as f:
        f.write(js_content)

    print(
        f"\nGenerated pattern-list.js with {len(pattern_data)} patterns (sorted newest first):"
    )
    for timestamp, pattern in pattern_data:
        print(f"  - {pattern} (timestamp: {timestamp})")


if __name__ == "__main__":
    main()
